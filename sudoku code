#include <iostream>
using namespace std;

const int N = 9; // Define the size of the Sudoku grid (9x9)

// Function to print the Sudoku grid
void printGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++)
            cout << grid[row][col] << " "; // Print each number in the row
        cout << endl; // Move to the next line after each row
    }
}

// Function to check if placing a number in the given position is safe
bool isSafe(int grid[N][N], int row, int col, int num) {
    // Check the current row and column for the number
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num || grid[x][col] == num)
            return false; // If the number is found, it's not safe
    }

    // Determine the starting point of the 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;

    // Check the 3x3 subgrid for the number
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num)
                return false; // If the number is found, it's not safe
        }
    }

    return true; // The number can be safely placed
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(int grid[N][N]) {
    int row = -1, col = -1;
    bool isFilled = true;

    // Find an unassigned cell (value 0)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (grid[i][j] == 0) {
                row = i;
                col = j;
                isFilled = false;
                break; // Break if an unassigned cell is found
            }
        }
        if (!isFilled) break;
    }

    // If all cells are assigned, the puzzle is solved
    if (isFilled) return true;

    // Try placing numbers 1 to 9 in the found cell
    for (int num = 1; num <= 9; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num; // Place the number if it's safe

            if (solveSudoku(grid)) // Recursively solve the rest of the grid
                return true;

            grid[row][col] = 0; // Backtrack if no solution is found
        }
    }

    return false; // Trigger backtracking if no number can be placed
}

int main() {
    int grid[N][N] = {
    {0, 2, 0, 6, 0, 8, 0, 0, 0},
    {5, 8, 0, 0, 0, 9, 7, 0, 0},
    {0, 0, 0, 0, 4, 0, 0, 0, 0},
    {3, 7, 0, 0, 0, 0, 5, 0, 0},
    {6, 0, 0, 0, 0, 0, 0, 0, 4},
    {0, 0, 8, 0, 0, 0, 0, 1, 3},
    {0, 0, 0, 0, 2, 0, 0, 0, 0},
    {0, 0, 9, 8, 0, 0, 0, 3, 6},
    {0, 0, 0, 3, 0, 6, 0, 9, 0}
};


    // Attempt to solve the Sudoku puzzle and print the result
    if (solveSudoku(grid))
        printGrid(grid); // Print the solved grid if a solution exists
    else
        cout << "No solution exists."; // Inform the user if no solution is found

    return 0;
}
